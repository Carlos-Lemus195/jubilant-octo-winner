
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\003\000\002\004\004\000\002\005\004\000\002" +
    "\005\003\000\002\006\004\000\002\007\003\000\002\007" +
    "\005\000\002\007\004\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\004\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\004\000\002\007\004\000\002\010\003" +
    "\000\002\010\005\000\002\010\004\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\004\000\002\010\005\000\002\010\005" +
    "\000\002\010\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\022\003\015\004\006\005\021\007\004\012" +
    "\017\016\012\017\010\020\014\001\002\000\004\017\105" +
    "\001\002\000\004\002\000\001\002\000\024\002\ufff5\003" +
    "\ufff5\004\ufff5\005\ufff5\007\ufff5\012\ufff5\016\ufff5\017\ufff5" +
    "\020\ufff5\001\002\000\024\002\ufff8\003\015\004\006\005" +
    "\021\007\004\012\017\016\012\017\010\020\014\001\002" +
    "\000\024\004\ufff3\006\ufff3\007\100\010\101\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\001\002\000\004\002\077" +
    "\001\002\000\016\005\021\007\004\012\017\016\012\017" +
    "\010\020\014\001\002\000\016\004\074\011\036\012\034" +
    "\013\033\014\037\015\035\001\002\000\020\004\uffe2\006" +
    "\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\001\002" +
    "\000\022\003\015\004\006\005\021\007\004\012\017\016" +
    "\012\017\010\020\014\001\002\000\004\002\uffff\001\002" +
    "\000\016\005\021\007\004\012\017\016\012\017\010\020" +
    "\014\001\002\000\024\002\ufffc\003\015\004\006\005\021" +
    "\007\004\012\017\016\012\017\010\020\014\001\002\000" +
    "\016\005\021\007\004\012\017\016\012\017\010\020\014" +
    "\001\002\000\016\004\030\011\026\012\023\013\024\014" +
    "\027\015\025\001\002\000\016\005\021\007\004\012\017" +
    "\016\012\017\010\020\014\001\002\000\016\005\021\007" +
    "\004\012\017\016\012\017\010\020\014\001\002\000\016" +
    "\005\021\007\004\012\017\016\012\017\010\020\014\001" +
    "\002\000\016\005\021\007\004\012\017\016\012\017\010" +
    "\020\014\001\002\000\016\005\021\007\004\012\017\016" +
    "\012\017\010\020\014\001\002\000\024\002\ufff6\003\ufff6" +
    "\004\ufff6\005\ufff6\007\ufff6\012\ufff6\016\ufff6\017\ufff6\020" +
    "\ufff6\001\002\000\020\004\uffe7\006\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\025\001\002\000\020\004\uffe6\006" +
    "\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\035\001\002" +
    "\000\016\005\021\007\004\012\017\016\012\017\010\020" +
    "\014\001\002\000\016\005\021\007\004\012\017\016\012" +
    "\017\010\020\014\001\002\000\016\005\021\007\004\012" +
    "\017\016\012\017\010\020\014\001\002\000\016\005\021" +
    "\007\004\012\017\016\012\017\010\020\014\001\002\000" +
    "\016\005\021\007\004\012\017\016\012\017\010\020\014" +
    "\001\002\000\020\004\uffd8\006\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\015\025\001\002\000\020\004\uffd9\006\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\035\001\002\000" +
    "\020\004\uffde\006\uffde\011\uffde\012\uffde\013\024\014\027" +
    "\015\025\001\002\000\020\004\uffdf\006\uffdf\011\uffdf\012" +
    "\uffdf\013\033\014\037\015\035\001\002\000\020\004\uffd5" +
    "\006\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\001" +
    "\002\000\020\004\uffd6\006\uffd6\011\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\001\002\000\020\004\uffdc\006\uffdc\011" +
    "\uffdc\012\uffdc\013\024\014\027\015\025\001\002\000\020" +
    "\004\uffdd\006\uffdd\011\uffdd\012\uffdd\013\033\014\037\015" +
    "\035\001\002\000\020\004\uffda\006\uffda\011\uffda\012\uffda" +
    "\013\uffda\014\uffda\015\025\001\002\000\020\004\uffdb\006" +
    "\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\035\001\002" +
    "\000\020\004\ufff0\006\ufff0\011\ufff0\012\ufff0\013\024\014" +
    "\027\015\025\001\002\000\020\004\uffef\006\uffef\011\uffef" +
    "\012\uffef\013\033\014\037\015\035\001\002\000\020\004" +
    "\uffea\006\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\001\002\000\020\004\uffe9\006\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\001\002\000\020\004\uffec\006\uffec" +
    "\011\uffec\012\uffec\013\uffec\014\uffec\015\025\001\002\000" +
    "\020\004\uffeb\006\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\015\035\001\002\000\020\004\uffee\006\uffee\011\uffee\012" +
    "\uffee\013\024\014\027\015\025\001\002\000\020\004\uffed" +
    "\006\uffed\011\uffed\012\uffed\013\033\014\037\015\035\001" +
    "\002\000\016\006\065\011\026\012\023\013\024\014\027" +
    "\015\025\001\002\000\016\006\064\011\036\012\034\013" +
    "\033\014\037\015\035\001\002\000\020\004\uffe1\006\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\001\002\000" +
    "\020\004\ufff2\006\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2" +
    "\015\ufff2\001\002\000\004\002\ufffe\001\002\000\004\002" +
    "\ufffd\001\002\000\020\004\ufff1\006\ufff1\011\ufff1\012\ufff1" +
    "\013\ufff1\014\ufff1\015\ufff1\001\002\000\020\004\uffe0\006" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\001\002" +
    "\000\004\002\ufffb\001\002\000\004\002\ufff7\001\002\000" +
    "\024\002\ufff4\003\ufff4\004\ufff4\005\ufff4\007\ufff4\012\ufff4" +
    "\016\ufff4\017\ufff4\020\ufff4\001\002\000\020\004\uffe8\006" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\001\002" +
    "\000\020\004\uffd7\006\uffd7\011\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\001\002\000\004\002\001\001\002\000\022" +
    "\004\uffe4\006\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015" +
    "\uffe4\017\102\001\002\000\020\004\uffd4\006\uffd4\011\uffd4" +
    "\012\uffd4\013\uffd4\014\uffd4\015\uffd4\001\002\000\020\004" +
    "\uffe5\006\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5" +
    "\001\002\000\004\002\ufff9\001\002\000\004\002\ufffa\001" +
    "\002\000\020\004\uffe3\006\uffe3\011\uffe3\012\uffe3\013\uffe3" +
    "\014\uffe3\015\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\020\002\010\003\004\004\015\005\017\006" +
    "\006\007\021\010\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\102\004\103\005" +
    "\017\006\006\007\021\010\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\074\010\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\071\004\072" +
    "\005\017\006\006\007\021\010\012\001\001\000\002\001" +
    "\001\000\006\007\067\010\070\001\001\000\016\003\065" +
    "\004\066\005\017\006\006\007\021\010\012\001\001\000" +
    "\006\007\061\010\062\001\001\000\002\001\001\000\006" +
    "\007\057\010\060\001\001\000\006\007\055\010\056\001" +
    "\001\000\006\007\053\010\054\001\001\000\006\007\051" +
    "\010\052\001\001\000\006\007\030\010\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\047\010\050\001\001\000\006\007\045\010\046\001" +
    "\001\000\006\007\043\010\044\001\001\000\006\007\041" +
    "\010\042\001\001\000\006\007\037\010\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){
        System.out.println("parse error/sintax error en la Línea " + (s.left) + ". No se esperaba este componente: " +s.value);
    }

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error irrecuperable en la Línea " + (s.left)+ ". Componente " + s.value + " no reconocido");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= instrucciones_enteros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= instrucciones_reales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones_enteros ::= instruccion_enteros instrucciones_enteros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones_enteros",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones_enteros ::= instruccion_enteros instrucciones_reales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones_enteros",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones_enteros ::= instruccion_enteros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones_enteros",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones_enteros ::= error instrucciones_enteros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones_enteros",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones_reales ::= instruccion_reales instrucciones_reales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones_reales",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones_reales ::= instruccion_reales instrucciones_enteros 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones_reales",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucciones_reales ::= instruccion_reales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones_reales",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instrucciones_reales ::= error instrucciones_reales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones_reales",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion_enteros ::= expresion_enteros LineTerminator 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        if(a != null){
            System.out.println("El valor de la expresión de tipo entero es: "+a);
        }
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion_enteros",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion_enteros ::= LineTerminator 
            {
              Object RESULT =null;
		System.out.println("Error Sintáctico -  Esta línea está vacía");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion_enteros",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion_reales ::= expresion_reales LineTerminator 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        if(a != null){
        System.out.println("El valor de la expresión de tipo real es: "+a);
        }
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion_reales",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion_enteros ::= ENTERO 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Integer(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_enteros",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion_enteros ::= PARENTESIS_APERTURA expresion_enteros PARENTESIS_CIERRE 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_enteros",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion_enteros ::= RESTA expresion_enteros 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a*-1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_enteros",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion_enteros ::= expresion_enteros SUMA expresion_enteros 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a+b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_enteros",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion_enteros ::= expresion_enteros SUMA expresion_reales 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a=null; System.out.println("parser error");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_enteros",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion_enteros ::= expresion_enteros RESTA expresion_enteros 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a-b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_enteros",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion_enteros ::= expresion_enteros RESTA expresion_reales 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a=null; System.out.println("parser error");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_enteros",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion_enteros ::= expresion_enteros MULTIPLICACION expresion_enteros 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a*b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_enteros",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion_enteros ::= expresion_enteros MULTIPLICACION expresion_reales 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a=null; System.out.println("parser error");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_enteros",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion_enteros ::= expresion_enteros POTENCIA expresion_enteros 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=(int)Math.pow(a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_enteros",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion_enteros ::= expresion_enteros POTENCIA expresion_reales 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a=null; System.out.println("parser error");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_enteros",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion_enteros ::= RAIZ expresion_enteros 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=(int)Math.sqrt(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_enteros",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion_enteros ::= expresion_enteros DIVISION expresion_enteros 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a=null; System.out.println("parser error");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_enteros",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion_enteros ::= expresion_enteros DIVISION expresion_reales 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a=null; System.out.println("parser error");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_enteros",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion_enteros ::= ENTERO COMA ENTERO 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a=null; System.out.println("error morfológico - parser error/sintax error - Ha ocurrido un error morfológico, y eso ha generado un error sintáctico.");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_enteros",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion_enteros ::= ENTERO COMA 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		a=null; System.out.println("error morfológico - parser error/sintax error - Ha ocurrido un error morfológico, y eso ha generado un error sintáctico.");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_enteros",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion_enteros ::= COMA ENTERO 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a=null; System.out.println("error morfológico - parser error/sintax error - Ha ocurrido un error morfológico, y eso ha generado un error sintáctico.");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_enteros",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion_reales ::= REAL 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Double(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_reales",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion_reales ::= PARENTESIS_APERTURA expresion_reales PARENTESIS_CIERRE 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_reales",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion_reales ::= RESTA expresion_reales 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a*-1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_reales",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion_reales ::= expresion_reales SUMA expresion_reales 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a+b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_reales",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion_reales ::= expresion_reales SUMA expresion_enteros 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a=null; System.out.println("parser error");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_reales",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion_reales ::= expresion_reales RESTA expresion_reales 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a-b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_reales",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion_reales ::= expresion_reales RESTA expresion_enteros 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a=null; System.out.println("parser error");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_reales",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion_reales ::= expresion_reales MULTIPLICACION expresion_reales 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a*b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_reales",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion_reales ::= expresion_reales MULTIPLICACION expresion_enteros 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a=null; System.out.println("parser error");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_reales",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion_reales ::= expresion_reales DIVISION expresion_reales 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a/b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_reales",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion_reales ::= expresion_reales DIVISION expresion_enteros 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a=null; System.out.println("parser error");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_reales",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion_reales ::= RAIZ expresion_reales 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a=null; System.out.println("parser error");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_reales",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion_reales ::= expresion_reales POTENCIA expresion_reales 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a=null; System.out.println("parser error");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_reales",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion_reales ::= expresion_reales POTENCIA expresion_enteros 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a=null; System.out.println("parser error");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_reales",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion_reales ::= ENTERO PUNTODECIMAL 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		a=null; System.out.println("error morfológico - parser error/sintax error - Ha ocurrido un error morfológico, y eso ha generado un error sintáctico.");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_reales",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
